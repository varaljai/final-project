---
# === SYSTEM SETUP ===

- name: Update apt cache
  apt:
    update_cache: yes

- name: Install system packages
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - software-properties-common
      - mysql-client
      - awscli
    state: present

# === DOCKER SETUP ===

- name: Add Docker GPG key
  shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -

- name: Add Docker repo
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable

- name: Install Docker
  apt:
    name: docker-ce
    state: latest
    update_cache: yes

- name: Install Docker Compose
  get_url:
    url: https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64
    dest: /usr/local/bin/docker-compose
    mode: '0755'

- name: Add ubuntu user to docker group
  user:
    name: ubuntu
    groups: docker
    append: yes

# === RSYNC FOR BACKEND AND FRONTEND ===  
- name: Ensure rsync is installed
  apt:
    name: rsync
    state: present
    update_cache: yes

# === DOCKER DEPLOYMENT ===

- name: Copy docker directory contents (frontend, backend, compose file)
  synchronize:
    src: "../../docker/"
    dest: /home/ubuntu/docker/
    rsync_opts:
      - "--exclude=backend/node_modules"
      
- name: Run docker-compose
  shell: docker-compose up -d
  args:
    chdir: /home/ubuntu/docker
# Optional: short delay to give backend time to start and connect to DB
- name: Wait for backend to initialize
  wait_for:
    port: 5000
    delay: 10
    timeout: 30
    host: localhost

# === scores table creation ===
- name: Create 'scores' table if not exists
  shell: |
    mysql -h {{ rds_endpoint }} -u {{ db_user }} -p{{ db_password }} -D {{ db_name }} -e "
    CREATE TABLE IF NOT EXISTS scores (
      id INT AUTO_INCREMENT PRIMARY KEY,
      name VARCHAR(3) NOT NULL,
      difficulty INT NOT NULL,
      score INT NOT NULL
    );"
  args:
    executable: /bin/bash

# === BACKUP TO S3 ===

- name: Make backup directory
  file:
    path: /home/ubuntu/db_backups
    state: directory
    mode: '0755'

- name: Dump RDS DB to backup.sql
  shell: |
    mysqldump -h {{ rds_endpoint }} -u {{ db_user }} -p"{{ db_password }}" {{ db_name }} > /home/ubuntu/db_backups/backup.sql
  args:
    executable: /bin/bash

- name: Upload backup to S3
  shell: |
    aws s3 cp /home/ubuntu/db_backups/backup.sql s3://{{ s3_bucket_name }}/backup-`date +%Y%m%d%H%M`.sql
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"

